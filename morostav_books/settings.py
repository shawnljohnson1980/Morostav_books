"""
Django settings for morostav_books project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ
import caldav
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
env_path = os.path.join(BASE_DIR, '.env.dev') 
env.read_env(env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

SECRET_KEY = env("SECRET_KEY", default="fallback-dev-key")

LOGIN_REDIRECT_URL = 'home'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
DEBUG = env.bool('DEBUG', default= True)
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[])
# settings.py
handler403 = 'your_app.views.custom_permission_denied'
from django.shortcuts import render

def custom_permission_denied(request, exception=None):
    return render(request, "403.html", status=403)

LOGIN_REDIRECT_URL = reverse_lazy('home')
LOGOUT_REDIRECT_URL = reverse_lazy('home') 

AUTH_USER_MODEL ='user_login_app.User'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'morostav_site',
    'user_login_app',
    'rest_framework',
]

MIDDLEWARE = [
    'user_login_app.middleware.block_ip.BlockIPMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]  


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}


ROOT_URLCONF = 'morostav_books.urls'

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
EMAIL_TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates', 'email')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), EMAIL_TEMPLATE_DIR],  # ✅ Now it's defined
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors':[
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'morostav_site.context_processors.timestamp_context',
        ],     
    },
},
]


WSGI_APPLICATION = 'morostav_books.wsgi.application'
BASE_DIR = Path(__file__).resolve().parent.parent

def getenv(key, fallback=None, required=False):
    val = os.environ.get(key, fallback)
    if required and val is None:
        raise Exception(f"Environment variable '{key}' is required but not set.")
    return val


env = environ.Env()
environ.Env.read_env()  # Reads from .env file

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # ✅ Still MySQL, even for MariaDB
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST', default='127.0.0.1'),
        'PORT': env('DB_PORT', default='3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',  # ✅ Full Unicode support (emojis, symbols, etc.)
        },
    }
}
print(os.environ.get("DB_NAME"))


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST', default='mail.morostavbooks.com')
EMAIL_PORT = env.int('EMAIL_PORT', default=465)  # Change to 587 if using TLS
EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', default=True)  # Use False if using TLS
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=False)  # Use True if using TLS
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default=None)
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default=None)
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

CALDAV_USERNAME = env('CALDAV_USERNAME', default=None)
CALDAV_PASSWORD = env('CALDAV_PASSWORD', default=None)

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'error.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}
SECURE_HSTS_SECONDS = 31536000
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/django_debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
